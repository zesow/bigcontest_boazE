1+2
1+2
# 안녕ㄹ하세요
a <- 25
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
class(a)
class(b)
a <- 25
b <- "Boaz"
c <- FALSE
TRUE & TRUE
TRUE & FALSE
TRUE | TRUE
TRUE | FALSE
class(a)
class(b)
class(c)
ls()               # 현재 생성된 변수들을 보여줌
rm(a) ## 특정 변수 제거
rm( list = ls() )  # 모든 변수 제거
fibo2 <- function(n,x1,x2){
if(n == x1){
return(x1)
}
else if(n == x2){
return(x2)
}
else{
return(fibo(n - 1) + fibo(n - 2))
}
}
fibo2(3,1,1)
fibo2 <- function(n,x1,x2){
if(n == x1){
return(x1)
}
else if(n == x2){
return(x2)
}
else{
return(fibo(n - 1) + fibo(n - 2))
}
}
fibo2(3,1,1)
fibo2 <- function(n,x1,x2){
if(n == x1){
return(x1)
}
else if(n == x2){
return(x2)
}
else{
return(fibo2(n - 1) + fibo2(n - 2))
}
}
fibo2(3,1,1)
fibo2 <- function(n,x1,x2){
if(n == x1){
return(x1)
}
else if(n == x2){
return(x2)
}
else{
return(fibo2(n - 1,x1,x2) + fibo2(n - 2,x1,x2))
}
}
fibo2(3,1,1)
fibo2(4,1,2)
fibo2(5,1,2)
for(i in 1:length(list))
sum <- function(list){
sum = 0
for(i in 1:length(list))
sum <- sum + list[i]
i = i+1
return(sum)
}
sum <- function(list){
sum = 0
for(i in 1:length(list))
sum <- sum + list[i]
i = i+1
return(sum)
}
sum(c(1,2,3))
mysum <- function(list){
sum = 0
for(i in 1:length(list))
sum <- sum + list[i]
i = i+1
return(sum)
}
mysum(c(1,2,3))
for(i in 1:5){
for(j in 1:i){
print('*')
}
print('\n')
}
for(i in 1:5){
for(j in 1:i){
cat('*')
}
cat('\n')
}
mymax <- function(list){
i = 1
for(i in 1:length(list)){
max = list[1]
if(max <= list[i]){
max <- list[i]
}
}
return(max)}
mymax(c(1,2,3))
mymax <- function(list){
i = 1
for(i in 1:length(list)){
max = list[1]
if(max < list[i]){
max <- list[i]
}
}
return(max)}
mymax(c(1,2,3))
sum_bunsu <- function(n){
sum1 <- 0
result <- 0
for(i in 1:n){
N = sum(1:i)
result <- result + 1/N
}
return(result)
}
sum_bunsu(1)
sum_bunsu(2)
fibo <- function(n){
if(n == 1 || n == 2)
return n
}
fibo <- function(n){
if(n == 1 || n == 2)
return(n)
}
fibo(1)
fibo(2)
fibo <- function(n){
if(n == 1 || n == 2)
return(n)
return fibo(n-1) + fibo(n-2)
}
fibo <- function(n){
if(n == 1 || n == 2)
return(n)
return(fibo(n-1) + fibo(n-2))
}
fibo(3)
fibo <- function(n){
if(n == 1 || n == 2)
return(1)
return(fibo(n-1) + fibo(n-2))
}
fibo(3)
fibo(4)
fibo(5)
source('~/r1.R')
source('~/r1.R')
source('~/r1.R')
kor <- c(8,6,9,4,5,5,4,10,7,7)
mat <- c(7,5,4,5,8,9,7,10,5,7)
eng <- c(2,7,9,7,9,6,10,9,4,5)
grade <- data.frame(kor,mat,eng)
grade
apply(grade,2,mean)
apply(grade,1,mean)
as.matrix(grade*2)
as.matrix(grade*2).transpose
transpose(as.matrix(grade*2))
as.matrix(grade*2)
library(dplyr)
library(tidyr)
ms <- read.csv("./2018-3-mobile-user-data.csv")
library(rvest)
library(stringr)
library(xlsx)
library(dplyr)
install.package('xlax')
install.package('xlsx')
install.packages('xlsx')
library(rvest)
library(stringr)
library(xlsx)
library(dplyr)
getwd()
setwd("/Users/yumunsang/Documents/2018summer/boaz/bigcontest_boazE/moviefile")
url_vec <- NULL
url <- "http://www.kobis.or.kr/kobis/business/stat/boxs/findDailyBoxOfficeList.do?loadEnd=0&searchType=excel&sSearchFrom="
s <- as.Date("2018-01-01")
e <- as.Date("2018-02-20")
date <- seq(from=s, to=e, by=1)
date <- as.character(date)
ch <- "&sSearchTo="
for (i in 1:length(date)) {
url1 <- paste0(url, date[i], ch, date[i])
url_vec <- append(url_vec, url1)
}
url_df <- as.data.frame(url_vec)
j<-1
for (j in 1:length(date)) {
# 날짜만 뽑아내서 파일 이름으로 하기 위해서.
b <- str_sub(as.character(url_df[j,1]), start=135, end=144)
b <- paste0(b,".xls")
a <- as.character(url_df[j,1])
download.file(a, destfile = b, method='libcurl')
}
library(rvest)
library(stringr)
library(xlsx)
library(dplyr)
getwd()
setwd("/Users/yumunsang/Documents/2018summer/boaz/bigcontest_boazE/moviefile")
url_vec <- NULL
url <- "http://www.kobis.or.kr/kobis/business/stat/boxs/findDailyBoxOfficeList.do?loadEnd=0&searchType=excel&sSearchFrom="
s <- as.Date("2009-01-01")
e <- as.Date("2017-08-14")
date <- seq(from=s, to=e, by=1)
date <- as.character(date)
day_df <- NULL
for (i in 1:length(date)) {
#다운 받은 파일 정리 (개봉일이 NA값인것들 처리 등등)
read_date <- paste0(date[i], ".xlsx")
day_list <- read.xlsx(read_date, sheetIndex = 1, encoding = 'UTF-8', rowIndex = 4:107, colClasses = "character")
movie_data <- day_list[-1,]
movie_data[3]
head(movie_data)
exc <- which(is.na(movie_data[3]))
movie_data <- movie_data[-exc,]
# 필요한 설명변수만 모음
vec <- c(2,3,9,12,13,15,18,19,20,21,22)
movie_data <- as.matrix(movie_data[,vec])
movie_data <- gsub(" ", "", movie_data)
movie_data <- as.data.frame(movie_data)
colnames(movie_data) <- c("title", "release", "day_audience", "total_audience", "screen", "Nationality",
"distributor", "grade", "genre", "director", "actor")
# date(날짜) 추가
movie_data$date <- date[i]
# day(개봉일로부터 얼마나 됬는지 처리)
exc1 <- NULL
rel <- as.Date(movie_data$release)
dat <- as.Date(movie_data$date)
da <- as.Date("2009-01-01")
exc1 <- append(exc1, which(rel-da < 0))
d <- dat-rel + 1
exc1 <- append(exc1, which(d > 40 | d < 1))
d <- d[-exc1]
movie_data <- movie_data[-exc1,]
movie_data$day <- as.integer(d)
# date를 바탕으로 요일 정하기
movie_data$weekday <- weekdays(as.Date(movie_data$date))
#휴일 정리 파일 읽어와서 휴일인지 아닌지 정리
holiday2 <- read.csv("holiday_cal.csv")
holiday <- NULL
for (x in 1:length(movie_data$date)) {
r <- which(as.Date(movie_data$date[x]) == as.Date(as.matrix(holiday2[1])))
holiday <- append(holiday, holiday2[r,2])
holiday
}
movie_data$holiday <- holiday
head(movie_data)
#날마다 정리된 데이터를 붙인다.
day_df <- rbind(day_df, movie_data)
print(i)
}
library(xlsx)
for (i in 1:length(date)) {
#다운 받은 파일 정리 (개봉일이 NA값인것들 처리 등등)
read_date <- paste0(date[i], ".xlsx")
day_list <- read.xlsx(read_date, sheetIndex = 1, encoding = 'UTF-8', rowIndex = 4:107, colClasses = "character")
movie_data <- day_list[-1,]
movie_data[3]
head(movie_data)
exc <- which(is.na(movie_data[3]))
movie_data <- movie_data[-exc,]
# 필요한 설명변수만 모음
vec <- c(2,3,9,12,13,15,18,19,20,21,22)
movie_data <- as.matrix(movie_data[,vec])
movie_data <- gsub(" ", "", movie_data)
movie_data <- as.data.frame(movie_data)
colnames(movie_data) <- c("title", "release", "day_audience", "total_audience", "screen", "Nationality",
"distributor", "grade", "genre", "director", "actor")
# date(날짜) 추가
movie_data$date <- date[i]
# day(개봉일로부터 얼마나 됬는지 처리)
exc1 <- NULL
rel <- as.Date(movie_data$release)
dat <- as.Date(movie_data$date)
da <- as.Date("2009-01-01")
exc1 <- append(exc1, which(rel-da < 0))
d <- dat-rel + 1
exc1 <- append(exc1, which(d > 40 | d < 1))
d <- d[-exc1]
movie_data <- movie_data[-exc1,]
movie_data$day <- as.integer(d)
# date를 바탕으로 요일 정하기
movie_data$weekday <- weekdays(as.Date(movie_data$date))
#휴일 정리 파일 읽어와서 휴일인지 아닌지 정리
holiday2 <- read.csv("holiday_cal.csv")
holiday <- NULL
for (x in 1:length(movie_data$date)) {
r <- which(as.Date(movie_data$date[x]) == as.Date(as.matrix(holiday2[1])))
holiday <- append(holiday, holiday2[r,2])
holiday
}
movie_data$holiday <- holiday
head(movie_data)
#날마다 정리된 데이터를 붙인다.
day_df <- rbind(day_df, movie_data)
print(i)
}
